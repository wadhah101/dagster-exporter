// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package main

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/Khan/genqlient/graphql"
)

// getSuccessfulRunsResponse is returned by getSuccessfulRuns on success.
type getSuccessfulRunsResponse struct {
	// Retrieve runs after applying a filter, cursor, and limit.
	RunsOrError getSuccessfulRunsRunsOrError `json:"-"`
}

// GetRunsOrError returns getSuccessfulRunsResponse.RunsOrError, and is useful for accessing the field via an interface.
func (v *getSuccessfulRunsResponse) GetRunsOrError() getSuccessfulRunsRunsOrError {
	return v.RunsOrError
}

func (v *getSuccessfulRunsResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getSuccessfulRunsResponse
		RunsOrError json.RawMessage `json:"runsOrError"`
		graphql.NoUnmarshalJSON
	}
	firstPass.getSuccessfulRunsResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.RunsOrError
		src := firstPass.RunsOrError
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalgetSuccessfulRunsRunsOrError(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal getSuccessfulRunsResponse.RunsOrError: %w", err)
			}
		}
	}
	return nil
}

type __premarshalgetSuccessfulRunsResponse struct {
	RunsOrError json.RawMessage `json:"runsOrError"`
}

func (v *getSuccessfulRunsResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getSuccessfulRunsResponse) __premarshalJSON() (*__premarshalgetSuccessfulRunsResponse, error) {
	var retval __premarshalgetSuccessfulRunsResponse

	{

		dst := &retval.RunsOrError
		src := v.RunsOrError
		var err error
		*dst, err = __marshalgetSuccessfulRunsRunsOrError(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal getSuccessfulRunsResponse.RunsOrError: %w", err)
		}
	}
	return &retval, nil
}

// getSuccessfulRunsRunsOrError includes the requested fields of the GraphQL interface RunsOrError.
//
// getSuccessfulRunsRunsOrError is implemented by the following types:
// getSuccessfulRunsRunsOrErrorInvalidPipelineRunsFilterError
// getSuccessfulRunsRunsOrErrorPythonError
// getSuccessfulRunsRunsOrErrorRuns
type getSuccessfulRunsRunsOrError interface {
	implementsGraphQLInterfacegetSuccessfulRunsRunsOrError()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
}

func (v *getSuccessfulRunsRunsOrErrorInvalidPipelineRunsFilterError) implementsGraphQLInterfacegetSuccessfulRunsRunsOrError() {
}
func (v *getSuccessfulRunsRunsOrErrorPythonError) implementsGraphQLInterfacegetSuccessfulRunsRunsOrError() {
}
func (v *getSuccessfulRunsRunsOrErrorRuns) implementsGraphQLInterfacegetSuccessfulRunsRunsOrError() {}

func __unmarshalgetSuccessfulRunsRunsOrError(b []byte, v *getSuccessfulRunsRunsOrError) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "InvalidPipelineRunsFilterError":
		*v = new(getSuccessfulRunsRunsOrErrorInvalidPipelineRunsFilterError)
		return json.Unmarshal(b, *v)
	case "PythonError":
		*v = new(getSuccessfulRunsRunsOrErrorPythonError)
		return json.Unmarshal(b, *v)
	case "Runs":
		*v = new(getSuccessfulRunsRunsOrErrorRuns)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing RunsOrError.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for getSuccessfulRunsRunsOrError: "%v"`, tn.TypeName)
	}
}

func __marshalgetSuccessfulRunsRunsOrError(v *getSuccessfulRunsRunsOrError) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *getSuccessfulRunsRunsOrErrorInvalidPipelineRunsFilterError:
		typename = "InvalidPipelineRunsFilterError"

		result := struct {
			TypeName string `json:"__typename"`
			*getSuccessfulRunsRunsOrErrorInvalidPipelineRunsFilterError
		}{typename, v}
		return json.Marshal(result)
	case *getSuccessfulRunsRunsOrErrorPythonError:
		typename = "PythonError"

		result := struct {
			TypeName string `json:"__typename"`
			*getSuccessfulRunsRunsOrErrorPythonError
		}{typename, v}
		return json.Marshal(result)
	case *getSuccessfulRunsRunsOrErrorRuns:
		typename = "Runs"

		result := struct {
			TypeName string `json:"__typename"`
			*getSuccessfulRunsRunsOrErrorRuns
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for getSuccessfulRunsRunsOrError: "%T"`, v)
	}
}

// getSuccessfulRunsRunsOrErrorInvalidPipelineRunsFilterError includes the requested fields of the GraphQL type InvalidPipelineRunsFilterError.
type getSuccessfulRunsRunsOrErrorInvalidPipelineRunsFilterError struct {
	Typename string `json:"__typename"`
}

// GetTypename returns getSuccessfulRunsRunsOrErrorInvalidPipelineRunsFilterError.Typename, and is useful for accessing the field via an interface.
func (v *getSuccessfulRunsRunsOrErrorInvalidPipelineRunsFilterError) GetTypename() string {
	return v.Typename
}

// getSuccessfulRunsRunsOrErrorPythonError includes the requested fields of the GraphQL type PythonError.
type getSuccessfulRunsRunsOrErrorPythonError struct {
	Typename string `json:"__typename"`
}

// GetTypename returns getSuccessfulRunsRunsOrErrorPythonError.Typename, and is useful for accessing the field via an interface.
func (v *getSuccessfulRunsRunsOrErrorPythonError) GetTypename() string { return v.Typename }

// getSuccessfulRunsRunsOrErrorRuns includes the requested fields of the GraphQL type Runs.
type getSuccessfulRunsRunsOrErrorRuns struct {
	Typename string `json:"__typename"`
	Count    int    `json:"count"`
}

// GetTypename returns getSuccessfulRunsRunsOrErrorRuns.Typename, and is useful for accessing the field via an interface.
func (v *getSuccessfulRunsRunsOrErrorRuns) GetTypename() string { return v.Typename }

// GetCount returns getSuccessfulRunsRunsOrErrorRuns.Count, and is useful for accessing the field via an interface.
func (v *getSuccessfulRunsRunsOrErrorRuns) GetCount() int { return v.Count }

// The query or mutation executed by getSuccessfulRuns.
const getSuccessfulRuns_Operation = `
query getSuccessfulRuns {
	runsOrError(filter: {statuses:SUCCESS}) {
		__typename
		... on Runs {
			count
		}
	}
}
`

func getSuccessfulRuns(
	ctx_ context.Context,
	client_ graphql.Client,
) (*getSuccessfulRunsResponse, error) {
	req_ := &graphql.Request{
		OpName: "getSuccessfulRuns",
		Query:  getSuccessfulRuns_Operation,
	}
	var err_ error

	var data_ getSuccessfulRunsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}
